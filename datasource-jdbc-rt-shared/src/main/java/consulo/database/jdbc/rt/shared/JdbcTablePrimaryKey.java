/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package consulo.database.jdbc.rt.shared;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class JdbcTablePrimaryKey implements org.apache.thrift.TBase<JdbcTablePrimaryKey, JdbcTablePrimaryKey._Fields>, java.io.Serializable, Cloneable, Comparable<JdbcTablePrimaryKey> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JdbcTablePrimaryKey");

  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("keySeq", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField PK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pkName", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JdbcTablePrimaryKeyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JdbcTablePrimaryKeyTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String columnName; // required
  public short keySeq; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String pkName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_NAME((short)1, "columnName"),
    KEY_SEQ((short)2, "keySeq"),
    PK_NAME((short)3, "pkName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_NAME
          return COLUMN_NAME;
        case 2: // KEY_SEQ
          return KEY_SEQ;
        case 3: // PK_NAME
          return PK_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KEYSEQ_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("columnName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_SEQ, new org.apache.thrift.meta_data.FieldMetaData("keySeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PK_NAME, new org.apache.thrift.meta_data.FieldMetaData("pkName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JdbcTablePrimaryKey.class, metaDataMap);
  }

  public JdbcTablePrimaryKey() {
  }

  public JdbcTablePrimaryKey(
    java.lang.String columnName,
    short keySeq,
    java.lang.String pkName)
  {
    this();
    this.columnName = columnName;
    this.keySeq = keySeq;
    setKeySeqIsSet(true);
    this.pkName = pkName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JdbcTablePrimaryKey(JdbcTablePrimaryKey other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetColumnName()) {
      this.columnName = other.columnName;
    }
    this.keySeq = other.keySeq;
    if (other.isSetPkName()) {
      this.pkName = other.pkName;
    }
  }

  @Override
  public JdbcTablePrimaryKey deepCopy() {
    return new JdbcTablePrimaryKey(this);
  }

  @Override
  public void clear() {
    this.columnName = null;
    setKeySeqIsSet(false);
    this.keySeq = 0;
    this.pkName = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnName() {
    return this.columnName;
  }

  public JdbcTablePrimaryKey setColumnName(@org.apache.thrift.annotation.Nullable java.lang.String columnName) {
    this.columnName = columnName;
    return this;
  }

  public void unsetColumnName() {
    this.columnName = null;
  }

  /** Returns true if field columnName is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnName() {
    return this.columnName != null;
  }

  public void setColumnNameIsSet(boolean value) {
    if (!value) {
      this.columnName = null;
    }
  }

  public short getKeySeq() {
    return this.keySeq;
  }

  public JdbcTablePrimaryKey setKeySeq(short keySeq) {
    this.keySeq = keySeq;
    setKeySeqIsSet(true);
    return this;
  }

  public void unsetKeySeq() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEYSEQ_ISSET_ID);
  }

  /** Returns true if field keySeq is set (has been assigned a value) and false otherwise */
  public boolean isSetKeySeq() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEYSEQ_ISSET_ID);
  }

  public void setKeySeqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEYSEQ_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPkName() {
    return this.pkName;
  }

  public JdbcTablePrimaryKey setPkName(@org.apache.thrift.annotation.Nullable java.lang.String pkName) {
    this.pkName = pkName;
    return this;
  }

  public void unsetPkName() {
    this.pkName = null;
  }

  /** Returns true if field pkName is set (has been assigned a value) and false otherwise */
  public boolean isSetPkName() {
    return this.pkName != null;
  }

  public void setPkNameIsSet(boolean value) {
    if (!value) {
      this.pkName = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COLUMN_NAME:
      if (value == null) {
        unsetColumnName();
      } else {
        setColumnName((java.lang.String)value);
      }
      break;

    case KEY_SEQ:
      if (value == null) {
        unsetKeySeq();
      } else {
        setKeySeq((java.lang.Short)value);
      }
      break;

    case PK_NAME:
      if (value == null) {
        unsetPkName();
      } else {
        setPkName((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_NAME:
      return getColumnName();

    case KEY_SEQ:
      return getKeySeq();

    case PK_NAME:
      return getPkName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_NAME:
      return isSetColumnName();
    case KEY_SEQ:
      return isSetKeySeq();
    case PK_NAME:
      return isSetPkName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof JdbcTablePrimaryKey)
      return this.equals((JdbcTablePrimaryKey)that);
    return false;
  }

  public boolean equals(JdbcTablePrimaryKey that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_columnName = true && this.isSetColumnName();
    boolean that_present_columnName = true && that.isSetColumnName();
    if (this_present_columnName || that_present_columnName) {
      if (!(this_present_columnName && that_present_columnName))
        return false;
      if (!this.columnName.equals(that.columnName))
        return false;
    }

    boolean this_present_keySeq = true;
    boolean that_present_keySeq = true;
    if (this_present_keySeq || that_present_keySeq) {
      if (!(this_present_keySeq && that_present_keySeq))
        return false;
      if (this.keySeq != that.keySeq)
        return false;
    }

    boolean this_present_pkName = true && this.isSetPkName();
    boolean that_present_pkName = true && that.isSetPkName();
    if (this_present_pkName || that_present_pkName) {
      if (!(this_present_pkName && that_present_pkName))
        return false;
      if (!this.pkName.equals(that.pkName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetColumnName()) ? 131071 : 524287);
    if (isSetColumnName())
      hashCode = hashCode * 8191 + columnName.hashCode();

    hashCode = hashCode * 8191 + keySeq;

    hashCode = hashCode * 8191 + ((isSetPkName()) ? 131071 : 524287);
    if (isSetPkName())
      hashCode = hashCode * 8191 + pkName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(JdbcTablePrimaryKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetColumnName(), other.isSetColumnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnName, other.columnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKeySeq(), other.isSetKeySeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeySeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keySeq, other.keySeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPkName(), other.isSetPkName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPkName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pkName, other.pkName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JdbcTablePrimaryKey(");
    boolean first = true;

    sb.append("columnName:");
    if (this.columnName == null) {
      sb.append("null");
    } else {
      sb.append(this.columnName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keySeq:");
    sb.append(this.keySeq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pkName:");
    if (this.pkName == null) {
      sb.append("null");
    } else {
      sb.append(this.pkName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JdbcTablePrimaryKeyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public JdbcTablePrimaryKeyStandardScheme getScheme() {
      return new JdbcTablePrimaryKeyStandardScheme();
    }
  }

  private static class JdbcTablePrimaryKeyStandardScheme extends org.apache.thrift.scheme.StandardScheme<JdbcTablePrimaryKey> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, JdbcTablePrimaryKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnName = iprot.readString();
              struct.setColumnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.keySeq = iprot.readI16();
              struct.setKeySeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pkName = iprot.readString();
              struct.setPkNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, JdbcTablePrimaryKey struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.columnName != null) {
        oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
        oprot.writeString(struct.columnName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEY_SEQ_FIELD_DESC);
      oprot.writeI16(struct.keySeq);
      oprot.writeFieldEnd();
      if (struct.pkName != null) {
        oprot.writeFieldBegin(PK_NAME_FIELD_DESC);
        oprot.writeString(struct.pkName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JdbcTablePrimaryKeyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public JdbcTablePrimaryKeyTupleScheme getScheme() {
      return new JdbcTablePrimaryKeyTupleScheme();
    }
  }

  private static class JdbcTablePrimaryKeyTupleScheme extends org.apache.thrift.scheme.TupleScheme<JdbcTablePrimaryKey> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JdbcTablePrimaryKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumnName()) {
        optionals.set(0);
      }
      if (struct.isSetKeySeq()) {
        optionals.set(1);
      }
      if (struct.isSetPkName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetColumnName()) {
        oprot.writeString(struct.columnName);
      }
      if (struct.isSetKeySeq()) {
        oprot.writeI16(struct.keySeq);
      }
      if (struct.isSetPkName()) {
        oprot.writeString(struct.pkName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JdbcTablePrimaryKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.columnName = iprot.readString();
        struct.setColumnNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.keySeq = iprot.readI16();
        struct.setKeySeqIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pkName = iprot.readString();
        struct.setPkNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

